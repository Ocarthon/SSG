package de.ocarthon.ssg.curaengine.config;

import de.ocarthon.ssg.math.Vector;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class Printer {
    //
    // Extruder settings
    //
    HashMap<Integer, Extruder> extruders = new HashMap<>();


    //
    // Machine settings
    //

    /**
     * machine width (x-Axis) in mm
     */
    @CuraSetting(key = "machine_width")
    public double width = 240;

    /**
     * machine depth (y-Axis) in mm
     */
    @CuraSetting(key = "machine_depth")
    public double depth = 215;

    /**
     * machine height (z-Axis) in mm
     */
    @CuraSetting(key = "machine_height")
    public double height = 190;

    /**
     * number of extruder. Gets automatically set to
     * the number of extruders added via {@link #addExtruder(Extruder)}
     */
    @CuraSetting(key = "machine_extruder_count")
    private int extruderCount = 0;

    /**
     * G-Code flavor
     */
    @CuraSetting(key = "machine_gcode_flavor")
    public String gcodeFlavour = "RepRap (Marlin/Sprinter)";

    /**
     * G-Code sequence that is executed at the beginning of a print
     */
    public String startGCode = "G28 ;Home\n" +
            "G1 Z15.0 F6000 ;G0 the platform down 15mm\n";

    /**
     * G-Code sequence that is executed at the end of a print
     */
    public String endGCode = ";Retract the filament\n" +
            "G92 E1\n" +
            "G1 E-1 F300\n" +
            "G28 X0 Y0 ;Move to origin\n" +
            "M107 ; turn the fan of\n" +
            "M84 ; idle status";

    /**
     * whether to use G2-Commands for circles or
     * to approximate them with linear moves
     */
    public boolean useG2 = true;


    //
    // Print settings
    //

    /**
     * layer height in mm
     */
    @CuraSetting(key = "layer_height")
    public double layerHeight = 0.2;

    /**
     * layer height for first layer in mm
     */
    @CuraSetting(key = "layer_height_0")
    public double layerHeight0 = 0.2;

    /**
     * printing speed in mm/sec
     */
    @CuraSetting(key = "speed_print")
    public double printSpeed = 45;

    /**
     * travel speed in mm/sec
     */
    @CuraSetting(key = "speed_travel")
    public double travelSpeed = 120;

    /**
     * Amount of material that is retracted
     * between moves in mm
     */
    @CuraSetting(key = "retraction_amount")
    public double retractionAmount = 6;

    /**
     * speed at which the material is retracted
     * in mm/sec
     */
    @CuraSetting(key = "retraction_speed")
    public double retractionSpeed = 70;

    /**
     * thickness of top and bottom layers in mm
     */
    @CuraSetting(key = "top_bottom_thickness")
    public double topBottomThickness = 0.8;

    /**
     * Infill density in percent
     */
    @CuraSetting(key = "infill_sparse_density")
    public int infillDensity = 5;


    //
    // Adhesion
    //

    // TODO add brim and raft
    /**
     * adhesion type. skirt / none
     */
    @CuraSetting(key = "adhesion_type")
    public String adhesionType = "skirt";

    @CuraSetting(key = "skirt_line_count")
    public int skirtLineCount = 4;


    //
    // Support
    //

    /**
     * whether the CuraEngine generates support structures. Should
     * not be changed!
     */
    @CuraSetting(key = "support_enable")
    public boolean useSupport = false;

    /**
     * Pattern that will be used for support structures
     * generated by CuraEngine
     */
    @CuraSetting(key = "support_pattern")
    public String supportPattern = "zigzag";

    // TODO never used?
    /**
     * Max overhang angle that the printer can achieve. At higher
     * angles a support structure will be used.
     */
    @CuraSetting(key = "support_angle")
    public double supportAngle = 45;

    /**
     * Speed at which support structures generated by CuraEngine
     * will be printed at
     */
    @CuraSetting(key = "speed_support")
    public double supportSpeed = 60;

    /**
     * Infill rate for support structures generated by CuraEngine
     */
    @CuraSetting(key = "support_infill_rate")
    public int supportInfillDensity = 15;


    //
    // Dual extrusion
    //

    /**
     * whether to used dual extrusion
     */
    public boolean useDualPrint = false;

    /**
     * position at which a nozzle switch will be performed
     */
    public Vector nozzleSwitchPosition = new Vector(100, 40, 0);

    /**
     * amount the material will be retracted on an inactive nozzle
     */
    public double nozzleSwitchRetractionAmount = 12;

    // TODO fix conversion
    /**
     * speed at which the material will be retracted on a nozzle switch
     * in mm/sec
     */
    public double nozzleSwitchRetractionSpeed = 80;

    /**
     * Position of the prime tower for initial priming
     */
    public Vector initPrimeTowerPosition = new Vector(100, 40, 0);

    /**
     * Size of the prime tower for initial priming in mm
     */
    public double initPrimeTowerSize = 20;

    /**
     * position of the normal prime power
     */
    public Vector primeTowerPosition = new Vector(50, 40, 0);

    /**
     * Size of the normal prime tower in mm
     */
    public double primeTowerSize = 10;

    /**
     * Adds an extruder to the extruder list and
     * increases the extruder count by one.
     * @param ext added extruder
     */
    public void addExtruder(Extruder ext) {
        extruders.put(ext.extruderNr, ext);
        extruderCount++;
    }

    /**
     * Returns the extruder with the corresponding number
     * @param i extruder number
     * @return extruder
     */
    public Extruder getExtruder(int i) {
        return extruders.get(i);
    }

    /**
     * Creates a printer object for the Vellemann K8400
     * @return printer configuration
     */
    public static Printer k8400() {
        Printer printer = new Printer();

        Extruder ext1 = new Extruder(0);
        printer.addExtruder(ext1);

        Extruder ext2 = new Extruder(1);
        ext2.nozzleOffsetX = -24.5;
        printer.addExtruder(ext2);

        return printer;
    }
}

